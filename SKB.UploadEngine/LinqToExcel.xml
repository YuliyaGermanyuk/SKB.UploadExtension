<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqToExcel</name>
    </assembly>
    <members>
        <member name="T:LinqToExcel.Domain.Row">
            <summary>
            
            </summary>
        </member>
        <member name="M:LinqToExcel.Domain.Row.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:LinqToExcel.Domain.Row.#ctor(System.Collections.Generic.IList{LinqToExcel.Domain.Cell},System.Collections.Generic.IDictionary{System.String,System.Int32})">
            <param name = "cells">Cells contained within the row</param>
            <param name = "columnIndexMapping">Column name to cell index mapping</param>
        </member>
        <member name="P:LinqToExcel.Domain.Row.Item(System.String)">
            <param name = "columnName">Column Name</param>
        </member>
        <member name="P:LinqToExcel.Domain.Row.ColumnNames">
            <summary>
              List of column names in the row object
            </summary>
        </member>
        <member name="T:LinqToExcel.IExcelQueryFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.AddMapping``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
              Add a column to property mapping
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "property">Class property to map to</param>
            <param name = "column">Worksheet column name to map from</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.AddMapping(System.String,System.String)">
            <summary>
              Add a column to property mapping
            </summary>
            <param name = "propertyName">Class property to map to</param>
            <param name = "column">Worksheet column name to map from</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.AddMapping``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Func{System.String,System.Object})">
            <summary>
              Add a column to property mapping with a transformation operation
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "property">Class property to map to</param>
            <param name = "column">Worksheet column name to map from</param>
            <param name = "transformation">Lambda expression that transforms a cell value in the spreadsheet to the desired property value</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.AddTransformation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Func{System.String,System.Object})">
            <summary>
              Transforms a cell value in the spreadsheet to the desired property value
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "property">Class property value to transform</param>
            <param name = "transformation">Lambda expression that transforms a cell value in the spreadsheet to the desired property value</param>
            <example>
              AddTransformation{Person}(p => p.IsActive, x => x == "Y");
              AddTransformation{Person}(p => p.IsYoung, x => DateTime.Parse(x) > new DateTime(2000, 1, 1));
            </example>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.Worksheet``1">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.Worksheet``1(System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.Worksheet``1(System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.Worksheet">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.Worksheet(System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.Worksheet(System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetRange``1(System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetRange``1(System.String,System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetRange``1(System.String,System.String,System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetRange(System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetRange(System.String,System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetRange(System.String,System.String,System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetNoHeader">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetNoHeader(System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetNoHeader(System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetRangeNoHeader(System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetRangeNoHeader(System.String,System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.WorksheetRangeNoHeader(System.String,System.String,System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.GetWorksheetNames">
            <summary>
              Returns a list of worksheet names that the spreadsheet contains
            </summary>
        </member>
        <member name="M:LinqToExcel.IExcelQueryFactory.GetColumnNames(System.String)">
            <summary>
              Returns a list of columns names that a worksheet contains
            </summary>
            <param name = "worksheetName">Worksheet name to get the list of column names from</param>
        </member>
        <member name="P:LinqToExcel.IExcelQueryFactory.FileName">
            <summary>
              Full path to the Excel spreadsheet
            </summary>
        </member>
        <member name="P:LinqToExcel.IExcelQueryFactory.StrictMapping">
            <summary>
              Confirms all the worksheet columns are mapped to a property, and if not, throws a StrictMappingException
            </summary>
        </member>
        <member name="T:LinqToExcel.Extensions.CommonExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:LinqToExcel.Extensions.CommonExtensions.SetProperty(System.Object,System.String,System.Object)">
            <summary>
              Sets the value of a property
            </summary>
            <param name="object"></param>
            <param name = "propertyName">Name of the property</param>
            <param name = "value">Value to set the property to</param>
        </member>
        <member name="M:LinqToExcel.Extensions.CommonExtensions.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
              Calls a method
            </summary>
            <param name="object"></param>
            <param name = "methodName">Name of the method</param>
            <param name = "args">Method arguments</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="M:LinqToExcel.Extensions.CommonExtensions.Cast``1(System.Object)">
            <summary>
            
            </summary>
            <param name="object"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToExcel.Extensions.CommonExtensions.Cast(System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="object"></param>
            <param name="castType"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToExcel.Extensions.CommonExtensions.Cast``1(System.Collections.Generic.IEnumerable{System.Object},System.Func{System.Object,``0})">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="caster"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToExcel.Extensions.CommonExtensions.Cast``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="list"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToExcel.Extensions.CommonExtensions.ToArray(System.Collections.Generic.ICollection{System.String})">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToExcel.Extensions.CommonExtensions.IsNumber(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToExcel.Extensions.CommonExtensions.IsNullValue(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToExcel.Extensions.CommonExtensions.RegexReplace(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="regex"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="T:LinqToExcel.Domain.Cell">
            <summary>
              Represents a cell and its value in an excel spreadsheet
            </summary>
        </member>
        <member name="M:LinqToExcel.Domain.Cell.#ctor(System.Object)">
            <param name = "value">Cell's value</param>
        </member>
        <member name="M:LinqToExcel.Domain.Cell.Cast``1">
            <summary>
              Casts the cell's value to the generic argument type
            </summary>
            <typeparam name = "T">Object type to convert to</typeparam>
        </member>
        <member name="M:LinqToExcel.Domain.Cell.ToString">
            <summary>
              Cell's value as a string
            </summary>
        </member>
        <member name="M:LinqToExcel.Domain.Cell.op_Implicit(LinqToExcel.Domain.Cell)~System.String">
            <summary>
              Allow cell to be implicitly cast to a string
            </summary>
        </member>
        <member name="P:LinqToExcel.Domain.Cell.Value">
            <summary>
              Cell's value
            </summary>
        </member>
        <member name="T:LinqToExcel.Query.WhereClauseExpressionTreeVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:LinqToExcel.Query.WhereClauseExpressionTreeVisitor.#ctor(System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="sheetType"></param>
            <param name="columnMapping"></param>
        </member>
        <member name="M:LinqToExcel.Query.WhereClauseExpressionTreeVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:LinqToExcel.Query.WhereClauseExpressionTreeVisitor.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
              This method is visited when the LinqToExcel.Row type is used in the query
            </summary>
        </member>
        <member name="M:LinqToExcel.Query.WhereClauseExpressionTreeVisitor.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
              Only As() method calls on the LinqToExcel.Row type are support
            </summary>
        </member>
        <member name="M:LinqToExcel.Query.WhereClauseExpressionTreeVisitor.GetColumnName(System.Linq.Expressions.Expression)">
            <summary>
              Retrieves the column name from a member expression or method call expression
            </summary>
            <param name = "exp">Expression</param>
        </member>
        <member name="M:LinqToExcel.Query.WhereClauseExpressionTreeVisitor.GetColumnName(System.Linq.Expressions.MemberExpression)">
            <summary>
              Retrieves the column name from a member expression
            </summary>
            <param name = "mExp">Member Expression</param>
        </member>
        <member name="M:LinqToExcel.Query.WhereClauseExpressionTreeVisitor.GetColumnName(System.Linq.Expressions.MethodCallExpression)">
            <summary>
              Retrieves the column name from a method call expression
            </summary>
            <param name="mExp">Method Call Expression</param>
        </member>
        <member name="P:LinqToExcel.Query.WhereClauseExpressionTreeVisitor.WhereClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:LinqToExcel.Query.WhereClauseExpressionTreeVisitor.Params">
            <summary>
            
            </summary>
        </member>
        <member name="P:LinqToExcel.Query.WhereClauseExpressionTreeVisitor.ColumnNamesUsed">
            <summary>
            
            </summary>
        </member>
        <member name="T:LinqToExcel.ExcelQueryFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.#ctor(System.String)">
            <param name = "fileName">Full path to the Excel spreadsheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.AddMapping``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
              Add a column to property mapping
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "property">Class property to map to</param>
            <param name = "column">Worksheet column name to map from</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.AddMapping(System.String,System.String)">
            <summary>
              Add a column to property mapping
            </summary>
            <param name = "propertyName">Class property to map to</param>
            <param name = "column">Worksheet column name to map from</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.AddMapping``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Func{System.String,System.Object})">
            <summary>
              Add a column to property mapping with a transformation operation
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "property">Class property to map to</param>
            <param name = "column">Worksheet column name to map from</param>
            <param name = "transformation">Lambda expression that transforms the original string value to the desired property value</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.AddTransformation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Func{System.String,System.Object})">
            <summary>
              Transforms a cell value in the spreadsheet to the desired property value
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "property">Class property value to transform</param>
            <param name = "transformation">Lambda expression that transforms the original string value to the desired property value</param>
            <example>
              AddTransformation{Person}(p => p.IsActive, x => x == "Y");
              AddTransformation{Person}(p => p.IsYoung, x => DateTime.Parse(x) > new DateTime(2000, 1, 1));
            </example>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.GetWorksheetNames">
            <summary>
              Returns a list of worksheet names that the spreadsheet contains
            </summary>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.GetColumnNames(System.String)">
            <summary>
              Returns a list of columns names that a worksheet contains
            </summary>
            <param name = "worksheetName">Worksheet name to get the list of column names from</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet``1">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet``1(System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet``1(System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet(System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet(System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetRange``1(System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "startRange"></param>
            <param name = "endRange"></param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetRange(System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetRange(System.String,System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetRange(System.String,System.String,System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetRange``1(System.String,System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetRange``1(System.String,System.String,System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetNoHeader">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetNoHeader(System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetNoHeader(System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetRangeNoHeader(System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetRangeNoHeader(System.String,System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetName">Name of the worksheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.WorksheetRangeNoHeader(System.String,System.String,System.Int32)">
            <summary>
              Enables Linq queries against an Excel worksheet that does not have a header row
            </summary>
            <param name = "startRange">Upper left cell name of the range (eg 'B2')</param>
            <param name = "endRange">Bottom right cell name of the range (eg 'D4')</param>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet``1(System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "worksheetName">Name of the worksheet</param>
            <param name = "fileName">Full path to the Excel spreadsheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet``1(System.Int32,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
            <param name = "fileName">Full path to the Excel spreadsheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet(System.String,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "worksheetName">Name of the worksheet</param>
            <param name = "fileName">Full path to the Excel spreadsheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet(System.Int32,System.String)">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
            <param name = "fileName">Full path to the Excel spreadsheet</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "worksheetName">Name of the worksheet</param>
            <param name = "fileName">Full path to the Excel spreadsheet</param>
            <param name = "columnMappings">Column to property mappings</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
            <param name = "fileName">Full path to the Excel spreadsheet</param>
            <param name = "columnMappings">Column to property mappings</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "worksheetName">Name of the worksheet</param>
            <param name = "fileName">Full path to the Excel spreadsheet</param>
            <param name = "columnMappings">Column to property mappings</param>
        </member>
        <member name="M:LinqToExcel.ExcelQueryFactory.Worksheet``1(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              Enables Linq queries against an Excel worksheet
            </summary>
            <typeparam name = "TSheetData">Class type to return row data as</typeparam>
            <param name = "worksheetIndex">Worksheet index ordered by name, not position in the workbook</param>
            <param name = "fileName">Full path to the Excel spreadsheet</param>
            <param name = "columnMappings">Column to property mappings</param>
        </member>
        <member name="P:LinqToExcel.ExcelQueryFactory.FileName">
            <summary>
              Full path to the Excel spreadsheet
            </summary>
        </member>
        <member name="P:LinqToExcel.ExcelQueryFactory.StrictMapping">
            <summary>
              Confirms all the worksheet columns are mapped to a property, and if not, throws a StrictMappingException
            </summary>
        </member>
        <member name="M:LinqToExcel.Query.ExcelQueryExecutor.ExecuteScalar``1(Remotion.Data.Linq.QueryModel)">
            <summary>
              Executes a query with a scalar result, i.e. a query that ends with a result operator such as Count, Sum, or Average.
            </summary>
        </member>
        <member name="M:LinqToExcel.Query.ExcelQueryExecutor.ExecuteSingle``1(Remotion.Data.Linq.QueryModel,System.Boolean)">
            <summary>
              Executes a query with a single result object, i.e. a query that ends with a result operator such as First, Last, Single, Min, or Max.
            </summary>
        </member>
        <member name="M:LinqToExcel.Query.ExcelQueryExecutor.ExecuteCollection``1(Remotion.Data.Linq.QueryModel)">
            <summary>
              Executes a query with a collection result.
            </summary>
        </member>
        <member name="M:LinqToExcel.Query.ExcelQueryExecutor.GetDataResults(LinqToExcel.Query.SqlParts,Remotion.Data.Linq.QueryModel)">
            <summary>
              Executes the sql query and returns the data results
            </summary>
            <typeparam name = "T">Data type in the main from clause (queryModel.MainFromClause.ItemType)</typeparam>
            <param name = "queryModel">Linq query model</param>
        </member>
        <member name="M:LinqToExcel.Query.ExcelQueryExecutor.LogColumnMappingWarnings(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Logs a warning for any property to column mappings that do not exist in the excel worksheet
            </summary>
            <param name = "Columns">List of columns in the worksheet</param>
        </member>
        <member name="T:LinqToExcel.Domain.StrictMappingException">
            <summary>
            
            </summary>
        </member>
        <member name="M:LinqToExcel.Domain.StrictMappingException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:LinqToExcel.Domain.StrictMappingException.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="formatMessage"></param>
            <param name="args"></param>
        </member>
        <member name="T:LinqToExcel.Domain.RowNoHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:LinqToExcel.Domain.RowNoHeader.#ctor(System.Collections.Generic.IEnumerable{LinqToExcel.Domain.Cell})">
            <param name = "cells">Cells contained within the row</param>
        </member>
    </members>
</doc>
